name: Build rampagent Configurator

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: rampagent-configurator-linux
            asset_name: rampagent-configurator-linux
            executable: ConfigCreator
          - os: windows-latest
            artifact_name: rampagent-configurator-windows-x64
            asset_name: rampagent-configurator-windows-x64
            executable: ConfigCreator.exe
          - os: macos-latest
            artifact_name: rampagent-configurator-macos
            asset_name: rampagent-configurator-macos
            executable: ConfigCreator

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential zip make

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          mingw-w64-x86_64-curl

    - name: Update MSYS2 and ensure build tools (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        # Update package DB and core packages, then ensure make and toolchain are installed
        pacman -Syu --noconfirm
        pacman -S --noconfirm base-devel mingw-w64-x86_64-toolchain make

    - name: Install Xcode Command Line Tools (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        xcode-select --install || true
        brew install zip || true

    - name: Download nlohmann/json header (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p nlohmann
        curl -o nlohmann/json.hpp https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp

    - name: Download nlohmann/json header (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        mkdir -p nlohmann
        curl -o nlohmann/json.hpp https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp

    - name: Build using Makefile
      run: make
      if: matrix.os != 'windows-latest'

    - name: Build using Makefile (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: make

    - name: Create configs directory
      run: mkdir -p configs

    - name: Package artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release
        cp ${{ matrix.executable }} release/
        cp -r configs release/
        cd release
        zip -r ../${{ matrix.artifact_name }}.zip ./*
        cd ..

    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path release | Out-Null
        Copy-Item -Path "${{ matrix.executable }}" -Destination release/ -Force
        Copy-Item -Path configs -Destination release/ -Recurse -Force
    - name: Create zip on Windows (PowerShell)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Compress-Archive -Path release\* -DestinationPath $env:GITHUB_WORKSPACE\${{ matrix.artifact_name }}.zip -Force

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.zip

    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ matrix.artifact_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip